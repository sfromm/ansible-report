#!/usr/bin/python

# Written by Stephen Fromm <stephenf nero net>
# (C) 2013-2014 University of Oregon
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

__requires__ = ['SQLAlchemy >= 0.7']
import pkg_resources

import operator
import os
import json
import logging
import sys
import json
import smtplib
from optparse import OptionParser
from optparse import OptionGroup

import ansiblereport
import ansiblereport.constants as C
from ansiblereport.manager import *
from ansiblereport.utils import *
from ansiblereport.output_plugins import *

def report_tasks(options, mgr, args):
    ''' report on specific tasks '''
    if options.age:
        age = parse_datetime_string(options.age)
        if age:
            args['timestamp'] = age
    return mgr.find_tasks(limit=options.limit, args=args)

def report_playbooks(options, mgr, args):
    ''' report on playbook information '''
    if options.age:
        age = parse_datetime_string(options.age)
        if age:
            args['starttime'] = age
    return mgr.find_playbooks(limit=options.limit, args=args)

def build_task_args(options):
    ''' return dict of search criteria for tasks '''
    args = {}
    if options.changed:
        args['changed'] = options.changed
    if options.hostname:
        args['hostname'] = options.hostname
    if options.module_name:
        args['module'] = options.module_name
    if options.result:
        args['result'] = [x.upper() for x in options.result]
    return args

def build_playbook_args(options):
    ''' return dict of search criteria for playbooks '''
    args = {}
    if options.uuid:
        args['uuid'] = options.uuid
    if options.path:
        args['path'] = options.path
    if options.connection:
        args['connection'] = options.connection
    return args

def report(options, mgr, kwargs):
    ''' select information from db for reporting on '''
    report = []
    report_data = ''
    args = build_task_args(options)
    if args:
        data = report_tasks(options, mgr, args)
    else:
        args = build_playbook_args(options)
        data = report_playbooks(options, mgr, args)
    outputs = OutputPlugins([C.DEFAULT_OUTPUT_PLUGIN_PATH])
    for plugin in options.output:
        if plugin in outputs.plugins:
            outputs.plugins[plugin].do_report(data, **kwargs)
    return

def prune_tasks(options, mgr, args):
    if options.age:
        age = parse_datetime_string(options.age)
        if age:
            args['timestamp'] = age
    count = mgr.rm_tasks(args=args)
    if options.verbose:
        print "Removed %s tasks from database" % count

def prune_playbooks(options, mgr, args):
    if options.age:
        age = parse_datetime_string(options.age)
        if age:
            args['starttime'] = age
    count = mgr.rm_playbooks(args=args)
    if options.verbose:
        print "Removed %s playbooks from database" % count

def prune(options, mgr, kwargs):
    args = build_playbook_args(options)
    pbs = prune_playbooks(options, mgr, args)
    args = {}
    args = build_task_args(options)
    prune_tasks(options, mgr, args)
    if options.verbose:
        print "Running VACUUM"
    mgr.vacuum()


def version(prog):
    return "%s %s" % (prog, ansiblereport.__version__)

def main(args):
    ''' main '''
    kwargs = {}
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage, version=version("%prog"))
    parser.add_option('-v', '--verbose', action="callback",
                      callback=increment_debug, default=C.DEFAULT_VERBOSE,
                      help='Be verbose.  Use more than once to increase verbosity')
    parser.add_option('-o', '--output', metavar='OUTPUT',
                      action='append',
                      help='Output destination for report. '
                           'Default is %s.' % (
                               ', '.join(C.DEFAULT_OUTPUT)))
    parser.add_option('-e', '--extra-args', dest='extra_args',
                      action='append',
                      help='Set additional key=value variables from CLI. '
                           'These will be passed to the output plugins')
    parser.add_option('--prune', action='store_true', default=False,
                      help='Prune old events from database. '
                           'Requires --age option.')
    parser.add_option('--stats', action='store_true', default=False,
                      help='Only report stats of playbooks and tasks')

    group = OptionGroup(parser, 'Playbook search criteria')
    group.add_option('--uuid', dest='uuid',
                     action='append',
                     help="playbook uuid(s) to restrict report to")
    group.add_option('--path', dest='path',
                     action='append',
                     help="playbook path(s) to restrict report to")
    group.add_option('--connection', dest='connection',
                     action='append',
                     help="playbook connection(s) to restrict report to")
    parser.add_option_group(group)

    group = OptionGroup(parser, 'Task search criteria')
    group.add_option('-c', '--changed', action='store_true',
                     help="search only for tasks that reported changed")
    group.add_option('-m', '--module-name', dest='module_name',
                     action='append',
                     help="module name(s) to restrict report to")
    group.add_option('-n', '--hostname', dest='hostname',
                     action='append',
                     help="hostname(s) to restrict report to")
    group.add_option('-r', '--result', action='append',
                     help="results to restrict report to")
    parser.add_option_group(group)

    group = OptionGroup(parser, 'General search criteria')
    group.add_option('-l', '--limit', metavar='LIMIT',
                     default=C.DEFAULT_LIMIT,
                     help="limit reported events to N")
    group.add_option('--age', metavar='AGE',
                     help='Restrict report to events no older '
                          'than this date string')
    parser.add_option_group(group)

    options, args = parser.parse_args()
    setup_logging()
    if not options.output:
        options.output = C.DEFAULT_OUTPUT
    if options.extra_args:
        for arg in options.extra_args:
            (key, val) = arg.split('=', 1)
            kwargs[key] = val
    kwargs['verbose'] = C.DEFAULT_VERBOSE
    kwargs['stats'] = options.stats
    mgr = Manager()
    if options.prune:
        if not options.age:
            print "Please define an age to prune the database."
            return 1
        prune(options, mgr, kwargs)
    else:
        report(options, mgr, kwargs)
    return 0

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1:]))
    except KeyboardInterrupt, e:
        # Generic handler for ansible specific errors
        print >> sys.stderr, "error: %s" % str(e)
        sys.exit(1)
